use Getopt::Long;
use strict;
use Data::Dumper;
use File::Basename;
use Encode;
use utf8;
use POSIX;
my %opt;
GetOptions(
	'i=s' => \$opt{"input"},
	't=s' => \$opt{"type"},
	'repo=s' => \$opt{"repo"},
	'update!' => \$opt{"update"},
	'init=s' => \$opt{"init"},
	'add!' => \$opt{"add"},
	'del!' => \$opt{"del"},
	'tree!' => \$opt{"tree"},
	'merge!' => \$opt{"merge"},
	) or die("Error in command line arguments\n");

if($opt{"init"}){
	init();
	exit;
}
if($opt{"tree"}&&$opt{"repo"}){
	tree();
	exit;
}
if($opt{"add"}&&$opt{"input"}&&$opt{"repo"}){
	add();
	exit;
}

sub add{
	if(-d $opt{"input"}){
		my $project = basename($opt{"input"});
		if($project){
			chomp($project);
			my $data = GetDate();
			if(-e "$opt{'repo'}/repertory/$project"){
				print "Project already exists\n";
				exit;
			}else{
				`mkdir $opt{"repo"}/repertory/$project`;
				`mkdir $opt{"repo"}/structure/$project`;
				`cp -r $opt{"input"} $opt{"repo"}/repertory/`;
				my $dir = `pwd`;
				chdir("$opt{'repo'}/repertory/$project");
				my @branch = `git branch`;
				foreach my $br(@branch){
					chomp($br);
					if($br =~ /^fatal/){
						`git init`;
						`touch $opt{"repo"}/structure/$project/master`;
					}else{
						$br =~ s/^\*\s*//;
						$br =~ s/^\s*//;
						$br =~ s/\s/_/;
						`touch $opt{"repo"}/structure/$project/$br`;
					}
				}
				`echo $data"\t"$project"\t"$opt{'repo'}/repertory/$project"\t"$opt{'input'}"\t"transplant > $opt{"repo"}/Config`;
				chdir($dir);
			}
		}else{
			print "Project name Can't be Null\n";
			exit;
		}
	}else{
		print "This is a File, if you want add to a new Project [y/n]\n";
		my $response = <STDIN>;
		if($response =~ /^y[\s\r\n]*$/){
			print "Please input Project name\n";
			my $project = <STDIN>;
			if($project){
				chomp($project);
				my $data = GetDate();
				if(-e "$opt{'repo'}/repertory/$project"){
					print "Project already exists\n";
					exit;
				}else{
					`mkdir $opt{"repo"}/repertory/$project`;
					`mkdir $opt{"repo"}/structure/$project`;
					`cp -r $opt{"input"} $opt{"repo"}/repertory/`;
					my $dir = `pwd`;
					chdir("$opt{'repo'}/repertory/$project");
					my @branch = `git branch`;
					foreach my $br(@branch){
						chomp($br);
						if($br =~ /^fatal/){
							`git init`;
							`touch $opt{"repo"}/structure/$project/master`;
						}else{
							$br =~ s/^\*\s*//;
							$br =~ s/^\s*//;
							$br =~ s/\s/_/;
							`touch $opt{"repo"}/structure/$project/$br`;
						}
					}
					`echo $data"\t"$project"\t"$opt{'repo'}/repertory/$project"\t"$opt{'input'}"\t"transplant > $opt{"repo"}/Config`;
					chdir($dir);
				}
			}else{
				print "Project name Can't be Null\n";
				exit;
			}
		}else{
			print "Can't Create New Project!\n";
			exit;
		}
	}
}

sub init{
	#Check SoftWare
	print "Start SoftWare Check!\n";
	my @software = ("tree","git");
	my @uninstall;
	my $status;
	foreach(@software){
		$status+=check($_,\@uninstall);
	}
	if($status>0){
		print "Can't Init Repertory, Some Command Can't find!\n";
		foreach(@uninstall){
			print "|-->".$_."\n";
		}
		exit;
	}else{
		print "Everything Look Good!\n";
	}
	
	#Check Dir
	if(-e $opt{"init"}){
		`mkdir $opt{'init'}/repertory` unless (-e "$opt{'init'}/repertory");
		`mkdir $opt{'init'}/structure` unless (-e "$opt{'init'}/repertory");
		`touch $opt{'init'}/Config` unless (-e "$opt{'init'}/repertory");
	}else{
		print "Create New Repertory <$opt{'init'}> ? [y/n]\n";
		my $response = <STDIN>;
		if($response =~ /^y[\s\r\n]*$/){
			`mkdir $opt{'init'}`;
			`mkdir $opt{'init'}/repertory`;
			`mkdir $opt{'init'}/structure`;
			`touch $opt{'init'}/Config`;
			print "Create New Repertory $opt{'init'} : OK!\n";
		}else{
			print "Can't Create New Repertory!\n";
			exit;
		}
	}
}

sub check{
	my $exec = shift;
	my $uninstall = shift;
	my $msg = `whereis $exec`;
	if($msg =~ /^.*:\s\/(.*)$/){
		return 0;
	}else{
		push @$uninstall,$exec;
		return 1;
	}
}

sub tree{
	my $tree = `tree $opt{"repo"}/structure`;
	print $tree."\n";
}


sub GetDate{
	my ($sec,$min,$hour,$day,$mon,$year,$wday,$yday,$isdst)=localtime(time());
	$year+=1900;
	$mon+=1;
	$mon = '0'.$mon if length($mon) == 1;
	$day = '0'.$day if length($day) == 1;
	my $id = "$year$mon$day";
	return $id;
}